// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/phello/phello.proto

package phello

import (
	fmt "fmt"
	parcel "github.com/go-roc/roc/parcel"
	context "github.com/go-roc/roc/parcel/context"
	service "github.com/go-roc/roc/service"
	client "github.com/go-roc/roc/service/client"
	handler "github.com/go-roc/roc/service/handler"
	invoke "github.com/go-roc/roc/service/invoke"
	server "github.com/go-roc/roc/service/server"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// request params.
type SayReq struct {
	Ping string `protobuf:"bytes,1,opt,name=ping,proto3" json:"ping,omitempty"`
}

func (m *SayReq) Reset()         { *m = SayReq{} }
func (m *SayReq) String() string { return proto.CompactTextString(m) }
func (*SayReq) ProtoMessage()    {}
func (*SayReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a01dda070618850, []int{0}
}
func (m *SayReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SayReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SayReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SayReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayReq.Merge(m, src)
}
func (m *SayReq) XXX_Size() int {
	return m.Size()
}
func (m *SayReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SayReq.DiscardUnknown(m)
}

var xxx_messageInfo_SayReq proto.InternalMessageInfo

func (m *SayReq) GetPing() string {
	if m != nil {
		return m.Ping
	}
	return ""
}

// response content.
type SayRsp struct {
	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (m *SayRsp) Reset()         { *m = SayRsp{} }
func (m *SayRsp) String() string { return proto.CompactTextString(m) }
func (*SayRsp) ProtoMessage()    {}
func (*SayRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a01dda070618850, []int{1}
}
func (m *SayRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SayRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SayRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SayRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayRsp.Merge(m, src)
}
func (m *SayRsp) XXX_Size() int {
	return m.Size()
}
func (m *SayRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SayRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SayRsp proto.InternalMessageInfo

func (m *SayRsp) GetPong() string {
	if m != nil {
		return m.Pong
	}
	return ""
}

type ApiReq struct {
	//params is URL query url.Values
	Params map[string]string `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ApiReq) Reset()         { *m = ApiReq{} }
func (m *ApiReq) String() string { return proto.CompactTextString(m) }
func (*ApiReq) ProtoMessage()    {}
func (*ApiReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a01dda070618850, []int{2}
}
func (m *ApiReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiReq.Merge(m, src)
}
func (m *ApiReq) XXX_Size() int {
	return m.Size()
}
func (m *ApiReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiReq.DiscardUnknown(m)
}

var xxx_messageInfo_ApiReq proto.InternalMessageInfo

func (m *ApiReq) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type ApiRsp struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ApiRsp) Reset()         { *m = ApiRsp{} }
func (m *ApiRsp) String() string { return proto.CompactTextString(m) }
func (*ApiRsp) ProtoMessage()    {}
func (*ApiRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a01dda070618850, []int{3}
}
func (m *ApiRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiRsp.Merge(m, src)
}
func (m *ApiRsp) XXX_Size() int {
	return m.Size()
}
func (m *ApiRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ApiRsp proto.InternalMessageInfo

func (m *ApiRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ApiRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

//FileReq must equals to github.com/go-roc/roc/parcel/packet/parcel.proto FileReq
type FileReq struct {
	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileSize int64  `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Body     []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *FileReq) Reset()         { *m = FileReq{} }
func (m *FileReq) String() string { return proto.CompactTextString(m) }
func (*FileReq) ProtoMessage()    {}
func (*FileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a01dda070618850, []int{4}
}
func (m *FileReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileReq.Merge(m, src)
}
func (m *FileReq) XXX_Size() int {
	return m.Size()
}
func (m *FileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FileReq.DiscardUnknown(m)
}

var xxx_messageInfo_FileReq proto.InternalMessageInfo

func (m *FileReq) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *FileReq) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *FileReq) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type FileRsp struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *FileRsp) Reset()         { *m = FileRsp{} }
func (m *FileRsp) String() string { return proto.CompactTextString(m) }
func (*FileRsp) ProtoMessage()    {}
func (*FileRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a01dda070618850, []int{5}
}
func (m *FileRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileRsp.Merge(m, src)
}
func (m *FileRsp) XXX_Size() int {
	return m.Size()
}
func (m *FileRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_FileRsp.DiscardUnknown(m)
}

var xxx_messageInfo_FileRsp proto.InternalMessageInfo

func (m *FileRsp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FileRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*SayReq)(nil), "phello.SayReq")
	proto.RegisterType((*SayRsp)(nil), "phello.SayRsp")
	proto.RegisterType((*ApiReq)(nil), "phello.ApiReq")
	proto.RegisterMapType((map[string]string)(nil), "phello.ApiReq.ParamsEntry")
	proto.RegisterType((*ApiRsp)(nil), "phello.ApiRsp")
	proto.RegisterType((*FileReq)(nil), "phello.FileReq")
	proto.RegisterType((*FileRsp)(nil), "phello.FileRsp")
}

func init() { proto.RegisterFile("proto/phello/phello.proto", fileDescriptor_2a01dda070618850) }

var fileDescriptor_2a01dda070618850 = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcb, 0x4e, 0xdb, 0x40,
	0x14, 0xf5, 0xc4, 0x89, 0x9b, 0xdc, 0xf4, 0xa5, 0x51, 0x17, 0xae, 0x5b, 0x59, 0x91, 0x37, 0xb5,
	0xaa, 0xca, 0xa9, 0xdc, 0x2e, 0x5a, 0x76, 0x80, 0x78, 0xac, 0x10, 0xb2, 0x85, 0xd8, 0x20, 0xa1,
	0x09, 0x19, 0x12, 0x0b, 0x3f, 0x06, 0xdb, 0x04, 0x39, 0x5f, 0xc1, 0x9e, 0x1f, 0x62, 0x99, 0x25,
	0x4b, 0x94, 0xfc, 0x08, 0x9a, 0x87, 0x21, 0x41, 0x42, 0x61, 0xe5, 0x73, 0xef, 0x39, 0xe7, 0x9e,
	0xab, 0x3b, 0x86, 0xaf, 0x2c, 0xcf, 0xca, 0xac, 0xcf, 0xc6, 0x34, 0x8e, 0xeb, 0x8f, 0x27, 0x7a,
	0xd8, 0x90, 0x95, 0xf3, 0x1d, 0x8c, 0x90, 0x54, 0x01, 0xbd, 0xc4, 0x18, 0x9a, 0x2c, 0x4a, 0x47,
	0x26, 0xea, 0x21, 0xb7, 0x13, 0x08, 0x5c, 0xb3, 0x05, 0x13, 0x6c, 0xb6, 0xc4, 0x66, 0xe9, 0xc8,
	0xb9, 0x06, 0x63, 0x93, 0x45, 0xdc, 0xeb, 0x83, 0xc1, 0x48, 0x4e, 0x92, 0xc2, 0x44, 0x3d, 0xdd,
	0xed, 0xfa, 0x96, 0xa7, 0xc2, 0x24, 0xef, 0x1d, 0x0a, 0x72, 0x27, 0x2d, 0xf3, 0x2a, 0x50, 0x4a,
	0xeb, 0x3f, 0x74, 0x97, 0xda, 0xf8, 0x33, 0xe8, 0x17, 0xb4, 0x52, 0xf3, 0x39, 0xc4, 0x5f, 0xa0,
	0x35, 0x21, 0xf1, 0x15, 0x35, 0x1b, 0xa2, 0x27, 0x8b, 0x8d, 0xc6, 0x3f, 0xe4, 0x78, 0x32, 0x58,
	0xae, 0x75, 0x96, 0x0d, 0xa9, 0xb0, 0xb5, 0x02, 0x81, 0xf9, 0xa4, 0xa4, 0x18, 0x29, 0x17, 0x87,
	0xce, 0x31, 0xbc, 0xdb, 0x8d, 0x62, 0xca, 0x37, 0xfd, 0x06, 0x9d, 0xf3, 0x28, 0xa6, 0xa7, 0x29,
	0x49, 0xa8, 0x0a, 0x6b, 0xf3, 0xc6, 0x01, 0x49, 0xe8, 0x13, 0x59, 0x44, 0x53, 0x99, 0xaa, 0x4b,
	0x32, 0x8c, 0xa6, 0x94, 0x47, 0x0d, 0xb2, 0x61, 0x65, 0xea, 0x3d, 0xe4, 0xbe, 0x0f, 0x04, 0x76,
	0xfa, 0x6a, 0xf0, 0x8b, 0x4d, 0x3e, 0xbc, 0xb6, 0x89, 0x7f, 0x02, 0xad, 0x7d, 0x7e, 0x18, 0xfc,
	0x03, 0xf4, 0x90, 0x54, 0xf8, 0x63, 0x7d, 0x28, 0xf9, 0x08, 0xd6, 0x4a, 0x5d, 0x30, 0x47, 0xc3,
	0x3f, 0xc5, 0x13, 0xec, 0xd1, 0xf2, 0x59, 0x2b, 0x8f, 0x6a, 0xad, 0xd4, 0x5c, 0xeb, 0xdf, 0x22,
	0x68, 0x8b, 0xf1, 0x61, 0x3e, 0x51, 0x46, 0x8e, 0xd6, 0x87, 0xf4, 0xa1, 0xc3, 0xb5, 0x65, 0x4e,
	0x49, 0xb2, 0x5e, 0xee, 0x22, 0xec, 0x03, 0x84, 0xa4, 0xda, 0x1e, 0x93, 0x34, 0xa5, 0xf1, 0x5b,
	0x1c, 0xbf, 0x91, 0xff, 0x17, 0x9a, 0xfc, 0x58, 0xf8, 0x17, 0x18, 0x47, 0x2c, 0xce, 0xc8, 0x10,
	0x7f, 0xaa, 0x75, 0xea, 0x75, 0xac, 0xd5, 0x06, 0x77, 0x6e, 0x99, 0x77, 0x73, 0x1b, 0xcd, 0xe6,
	0x36, 0x7a, 0x98, 0xdb, 0xe8, 0x66, 0x61, 0x6b, 0xb3, 0x85, 0xad, 0xdd, 0x2f, 0x6c, 0x6d, 0x60,
	0x88, 0x3f, 0xf9, 0xcf, 0x63, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xb9, 0xe1, 0x82, 0xe6, 0x02,
	0x00, 0x00,
}

func (m *SayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SayReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SayReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ping) > 0 {
		i -= len(m.Ping)
		copy(dAtA[i:], m.Ping)
		i = encodeVarintPhello(dAtA, i, uint64(len(m.Ping)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SayRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SayRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SayRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pong) > 0 {
		i -= len(m.Pong)
		copy(dAtA[i:], m.Pong)
		i = encodeVarintPhello(dAtA, i, uint64(len(m.Pong)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApiReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPhello(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPhello(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPhello(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApiRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPhello(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintPhello(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintPhello(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FileSize != 0 {
		i = encodeVarintPhello(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintPhello(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPhello(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintPhello(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPhello(dAtA []byte, offset int, v uint64) int {
	offset -= sovPhello(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ invoke.Invoke
var _ handler.Handler
var _ service.Service
var _ parcel.RocPacket
var _ client.Client
var _ server.Server

// This is a compile-time assertion to ensure that this generated file
// is compatible with the roc package it is being compiled against.
const _ = service.SupportPackageIsVersion1

type HelloClient interface {
	// requestResponse or fireAndForget.
	Say(c *context.Context, req *SayReq, opts ...invoke.InvokeOptions) (*SayRsp, error)
	// get http request api
	SayGet(c *context.Context, req *ApiReq, opts ...invoke.InvokeOptions) (*ApiRsp, error)
}

type helloClient struct {
	c *client.Client
}

func NewHelloClient(c *client.Client) HelloClient {
	return &helloClient{c}
}

func (cc *helloClient) Say(c *context.Context, req *SayReq, opts ...invoke.InvokeOptions) (*SayRsp, error) {
	rsp := &SayRsp{}
	err := cc.c.InvokeRR(c, "/hello/say", req, rsp, opts...)
	return rsp, err
}

func (cc *helloClient) SayGet(c *context.Context, req *ApiReq, opts ...invoke.InvokeOptions) (*ApiRsp, error) {
	rsp := &ApiRsp{}
	err := cc.c.InvokeRR(c, "/hello/sayget", req, rsp, opts...)
	return rsp, err
}

// HelloServer is the server API for Hello server.
type HelloServer interface {
	// requestResponse or fireAndForget.
	Say(c *context.Context, req *SayReq, rsp *SayRsp)
	// get http request api
	SayGet(c *context.Context, req *ApiReq, rsp *ApiRsp)
}

func RegisterHelloServer(s *server.Server, h HelloServer) {
	var r = &helloHandler{h: h, s: s}
	s.RegisterHandler("/"+s.Name()+"/hello/say", r.Say)
	s.RegisterHandler("/"+s.Name()+"/hello/sayget", r.SayGet)
}

type helloHandler struct {
	h HelloServer
	s *server.Server
}

func (r *helloHandler) Say(c *context.Context, req *parcel.RocPacket, interrupt handler.Interceptor) (rsp proto.Message, err error) {
	var in SayReq
	err = c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		return nil, err
	}
	var out = SayRsp{}
	if interrupt == nil {
		r.h.Say(c, &in, &out)
		return &out, err
	}
	f := func(c *context.Context, req proto.Message) proto.Message {
		r.h.Say(c, req.(*SayReq), &out)
		return &out
	}
	return interrupt(c, &in, f)
}

func (r *helloHandler) SayGet(c *context.Context, req *parcel.RocPacket, interrupt handler.Interceptor) (rsp proto.Message, err error) {
	var in ApiReq
	err = c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		return nil, err
	}
	var out = ApiRsp{}
	if interrupt == nil {
		r.h.SayGet(c, &in, &out)
		return &out, err
	}
	f := func(c *context.Context, req proto.Message) proto.Message {
		r.h.SayGet(c, req.(*ApiReq), &out)
		return &out
	}
	return interrupt(c, &in, f)
}

type HelloSrvClient interface {
	// requestResponse or fireAndForget.
	SaySrv(c *context.Context, req *SayReq, opts ...invoke.InvokeOptions) (*SayRsp, error)
	// requestStream.
	// SayReq is channel params.
	SayStream(c *context.Context, req *SayReq, opts ...invoke.InvokeOptions) (chan *SayRsp, chan error)
	// requestChannel.
	// SayReq and SayRsp is channel.
	SayChannel(c *context.Context, req chan *SayReq, errIn chan error, opts ...invoke.InvokeOptions) (chan *SayRsp, chan error)
}

type helloSrvClient struct {
	c *client.Client
}

func NewHelloSrvClient(c *client.Client) HelloSrvClient {
	return &helloSrvClient{c}
}

func (cc *helloSrvClient) SaySrv(c *context.Context, req *SayReq, opts ...invoke.InvokeOptions) (*SayRsp, error) {
	rsp := &SayRsp{}
	err := cc.c.InvokeRR(c, "/hellosrv/saysrv", req, rsp, opts...)
	return rsp, err
}

func (cc *helloSrvClient) SayStream(c *context.Context, req *SayReq, opts ...invoke.InvokeOptions) (chan *SayRsp, chan error) {
	data, errs := cc.c.InvokeRS(c, "/hellosrv/saystream", req, opts...)
	var rsp = make(chan *SayRsp)
	go func() {
		for b := range data {
			v := &SayRsp{}
			err := c.Codec().Decode(b, v)
			if err != nil {
				errs <- err
				break
			}
			rsp <- v
		}
		close(rsp)
	}()
	return rsp, errs
}

func (cc *helloSrvClient) SayChannel(c *context.Context, req chan *SayReq, errIn chan error, opts ...invoke.InvokeOptions) (chan *SayRsp, chan error) {
	var in = make(chan []byte)
	go func() {
		for b := range req {
			v, err := c.Codec().Encode(b)
			if err != nil {
				errIn <- err
				break
			}
			in <- v
		}
		close(in)
	}()

	data, errs := cc.c.InvokeRC(c, "/hellosrv/saychannel", in, errIn, opts...)
	var rsp = make(chan *SayRsp)
	go func() {
		for b := range data {
			v := &SayRsp{}
			err := c.Codec().Decode(b, v)
			if err != nil {
				errs <- err
				break
			}
			rsp <- v
		}
		close(rsp)
	}()
	return rsp, errs
}

// HelloSrvServer is the server API for HelloSrv server.
type HelloSrvServer interface {
	// requestResponse or fireAndForget.
	SaySrv(c *context.Context, req *SayReq, rsp *SayRsp)
	// requestStream.
	// SayReq is channel params.
	SayStream(c *context.Context, req *SayReq) (chan *SayRsp, chan error)
	// requestChannel.
	// SayReq and SayRsp is channel.
	SayChannel(c *context.Context, req chan *SayReq, errIn chan error) (chan *SayRsp, chan error)
}

func RegisterHelloSrvServer(s *server.Server, h HelloSrvServer) {
	var r = &helloSrvHandler{h: h, s: s}
	s.RegisterHandler("/"+s.Name()+"/hellosrv/saysrv", r.SaySrv)
	s.RegisterStreamHandler("/"+s.Name()+"/hellosrv/saystream", r.SayStream)
	s.RegisterChannelHandler("/"+s.Name()+"/hellosrv/saychannel", r.SayChannel)
}

type helloSrvHandler struct {
	h HelloSrvServer
	s *server.Server
}

func (r *helloSrvHandler) SaySrv(c *context.Context, req *parcel.RocPacket, interrupt handler.Interceptor) (rsp proto.Message, err error) {
	var in SayReq
	err = c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		return nil, err
	}
	var out = SayRsp{}
	if interrupt == nil {
		r.h.SaySrv(c, &in, &out)
		return &out, err
	}
	f := func(c *context.Context, req proto.Message) proto.Message {
		r.h.SaySrv(c, req.(*SayReq), &out)
		return &out
	}
	return interrupt(c, &in, f)
}

func (r *helloSrvHandler) SayStream(c *context.Context, req *parcel.RocPacket) (chan proto.Message, chan error) {
	var errs = make(chan error)
	var in SayReq
	err := c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		errs <- err
		close(errs)
		return nil, errs
	}

	out, outErrs := r.h.SayStream(c, &in)
	var rsp = make(chan proto.Message, len(out))

	go func() {
	QUIT:
		for {
			select {
			case d, ok := <-out:
				if ok {
					rsp <- d
				} else {
					break QUIT
				}
			case err := <-outErrs:
				errs <- err
				break QUIT
			}
		}
		close(rsp)
		close(errs)
	}()
	return rsp, errs
}

func (r *helloSrvHandler) SayChannel(c *context.Context, req chan *parcel.RocPacket, errIn chan error) (chan proto.Message, chan error) {
	var in = make(chan *SayReq)
	go func() {
		for b := range req {
			var v = &SayReq{}
			err := c.Codec().Decode(b.Bytes(), v)
			if err != nil {
				errIn <- err
				break
			}
			in <- v
		}
		close(in)
	}()

	out, outErrs := r.h.SayChannel(c, in, errIn)
	var rsp = make(chan proto.Message)

	go func() {
		for d := range out {
			rsp <- d
		}
		close(rsp)
	}()
	return rsp, outErrs
}

type FileClient interface {
	Upload(c *context.Context, req *FileReq, opts ...invoke.InvokeOptions) (*FileRsp, error)
}

type fileClient struct {
	c *client.Client
}

func NewFileClient(c *client.Client) FileClient {
	return &fileClient{c}
}

func (cc *fileClient) Upload(c *context.Context, req *FileReq, opts ...invoke.InvokeOptions) (*FileRsp, error) {
	rsp := &FileRsp{}
	err := cc.c.InvokeRR(c, "/file/upload", req, rsp, opts...)
	return rsp, err
}

// FileServer is the server API for File server.
type FileServer interface {
	Upload(c *context.Context, req *FileReq, rsp *FileRsp)
}

func RegisterFileServer(s *server.Server, h FileServer) {
	var r = &fileHandler{h: h, s: s}
	s.RegisterHandler("/"+s.Name()+"/file/upload", r.Upload)
}

type fileHandler struct {
	h FileServer
	s *server.Server
}

func (r *fileHandler) Upload(c *context.Context, req *parcel.RocPacket, interrupt handler.Interceptor) (rsp proto.Message, err error) {
	var in FileReq
	err = c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		return nil, err
	}
	var out = FileRsp{}
	if interrupt == nil {
		r.h.Upload(c, &in, &out)
		return &out, err
	}
	f := func(c *context.Context, req proto.Message) proto.Message {
		r.h.Upload(c, req.(*FileReq), &out)
		return &out
	}
	return interrupt(c, &in, f)
}

func (m *SayReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ping)
	if l > 0 {
		n += 1 + l + sovPhello(uint64(l))
	}
	return n
}

func (m *SayRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pong)
	if l > 0 {
		n += 1 + l + sovPhello(uint64(l))
	}
	return n
}

func (m *ApiReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPhello(uint64(len(k))) + 1 + len(v) + sovPhello(uint64(len(v)))
			n += mapEntrySize + 1 + sovPhello(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ApiRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhello(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPhello(uint64(l))
	}
	return n
}

func (m *FileReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovPhello(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovPhello(uint64(m.FileSize))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovPhello(uint64(l))
	}
	return n
}

func (m *FileRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhello(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPhello(uint64(l))
	}
	return n
}

func sovPhello(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPhello(x uint64) (n int) {
	return sovPhello(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ping = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SayRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SayRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SayRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pong", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pong = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhello
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhello
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPhello
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPhello
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPhello
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPhello
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPhello
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPhello
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPhello(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPhello
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhello
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPhello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPhello(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPhello
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPhello
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPhello
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPhello
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPhello        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPhello          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPhello = fmt.Errorf("proto: unexpected end of group")
)
