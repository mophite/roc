// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: phello.proto

package phello

import (
	fmt "fmt"
	parcel "github.com/go-roc/roc/parcel"
	context "github.com/go-roc/roc/parcel/context"
	service "github.com/go-roc/roc/service"
	client "github.com/go-roc/roc/service/client"
	handler "github.com/go-roc/roc/service/handler"
	invoke "github.com/go-roc/roc/service/invoke"
	server "github.com/go-roc/roc/service/server"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// request params.
type SayReq struct {
	Ping string `protobuf:"bytes,1,opt,name=ping,proto3" json:"ping,omitempty"`
}

func (m *SayReq) Reset()         { *m = SayReq{} }
func (m *SayReq) String() string { return proto.CompactTextString(m) }
func (*SayReq) ProtoMessage()    {}
func (*SayReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68df64f33d13f32, []int{0}
}
func (m *SayReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SayReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SayReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SayReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayReq.Merge(m, src)
}
func (m *SayReq) XXX_Size() int {
	return m.Size()
}
func (m *SayReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SayReq.DiscardUnknown(m)
}

var xxx_messageInfo_SayReq proto.InternalMessageInfo

func (m *SayReq) GetPing() string {
	if m != nil {
		return m.Ping
	}
	return ""
}

// response content.
type SayRsp struct {
	Pong string `protobuf:"bytes,2,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (m *SayRsp) Reset()         { *m = SayRsp{} }
func (m *SayRsp) String() string { return proto.CompactTextString(m) }
func (*SayRsp) ProtoMessage()    {}
func (*SayRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68df64f33d13f32, []int{1}
}
func (m *SayRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SayRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SayRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SayRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayRsp.Merge(m, src)
}
func (m *SayRsp) XXX_Size() int {
	return m.Size()
}
func (m *SayRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SayRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SayRsp proto.InternalMessageInfo

func (m *SayRsp) GetPong() string {
	if m != nil {
		return m.Pong
	}
	return ""
}

func init() {
	proto.RegisterType((*SayReq)(nil), "SayReq")
	proto.RegisterType((*SayRsp)(nil), "SayRsp")
}

func init() { proto.RegisterFile("phello.proto", fileDescriptor_b68df64f33d13f32) }

var fileDescriptor_b68df64f33d13f32 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xc8, 0x48, 0xcd,
	0xc9, 0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe1, 0x62, 0x0b, 0x4e, 0xac, 0x0c,
	0x4a, 0x2d, 0x14, 0x12, 0xe2, 0x62, 0x29, 0xc8, 0xcc, 0x4b, 0x97, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x02, 0xb3, 0x61, 0xb2, 0xc5, 0x05, 0x60, 0xd9, 0xfc, 0xbc, 0x74, 0x09, 0x26, 0xa8, 0x6c,
	0x7e, 0x5e, 0xba, 0x91, 0x3a, 0x17, 0x97, 0x07, 0xc8, 0xa8, 0xf0, 0xfc, 0xa2, 0x9c, 0x14, 0x21,
	0x49, 0x2e, 0xe6, 0xe0, 0xc4, 0x4a, 0x21, 0x76, 0x3d, 0x88, 0x79, 0x52, 0x10, 0x46, 0x71, 0x81,
	0x12, 0x83, 0x93, 0xc4, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7,
	0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x24, 0xb1, 0x81,
	0x5d, 0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x24, 0x26, 0x47, 0xa0, 0x95, 0x00, 0x00, 0x00,
}

func (m *SayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SayReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SayReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ping) > 0 {
		i -= len(m.Ping)
		copy(dAtA[i:], m.Ping)
		i = encodeVarintPhello(dAtA, i, uint64(len(m.Ping)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SayRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SayRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SayRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pong) > 0 {
		i -= len(m.Pong)
		copy(dAtA[i:], m.Pong)
		i = encodeVarintPhello(dAtA, i, uint64(len(m.Pong)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintPhello(dAtA []byte, offset int, v uint64) int {
	offset -= sovPhello(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ invoke.Invoke
var _ handler.Handler
var _ service.Service
var _ parcel.RocPacket
var _ client.Client
var _ server.Server

// This is a compile-time assertion to ensure that this generated file
// is compatible with the roc package it is being compiled against.
const _ = service.SupportPackageIsVersion1

type HelloWorldClient interface {
	// requestResponse or fireAndForget.
	Say(c *context.Context, req *SayReq, opts ...invoke.InvokeOptions) (*SayRsp, error)
}

type helloWorldClient struct {
	c *client.Client
}

func NewHelloWorldClient(c *client.Client) HelloWorldClient {
	return &helloWorldClient{c}
}

func (cc *helloWorldClient) Say(c *context.Context, req *SayReq, opts ...invoke.InvokeOptions) (*SayRsp, error) {
	rsp := &SayRsp{}
	err := cc.c.InvokeRR(c, service.GetApiPrefix()+"helloworld/say", req, rsp, opts...)
	return rsp, err
}

// HelloWorldServer is the server API for HelloWorld server.
type HelloWorldServer interface {
	// requestResponse or fireAndForget.
	Say(c *context.Context, req *SayReq, rsp *SayRsp) (err error)
}

func RegisterHelloWorldServer(s *server.Server, h HelloWorldServer) {
	var r = &helloWorldHandler{h: h, s: s}
	s.RegisterHandler(service.GetApiPrefix()+"helloworld/say", r.Say)
}

type helloWorldHandler struct {
	h HelloWorldServer
	s *server.Server
}

func (r *helloWorldHandler) Say(c *context.Context, req *parcel.RocPacket, interrupt handler.Interceptor) (rsp proto.Message, err error) {
	var in SayReq
	err = c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		return nil, err
	}
	var out = SayRsp{}
	if interrupt == nil {
		err = r.h.Say(c, &in, &out)
		return &out, err
	}
	f := func(c *context.Context, req proto.Message) (proto.Message, error) {
		err = r.h.Say(c, req.(*SayReq), &out)
		return &out, err
	}
	return interrupt(c, &in, f)
}

func (m *SayReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ping)
	if l > 0 {
		n += 1 + l + sovPhello(uint64(l))
	}
	return n
}

func (m *SayRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pong)
	if l > 0 {
		n += 1 + l + sovPhello(uint64(l))
	}
	return n
}

func sovPhello(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPhello(x uint64) (n int) {
	return sovPhello(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ping = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SayRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SayRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SayRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pong", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pong = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPhello(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPhello
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPhello
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPhello
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPhello
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPhello        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPhello          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPhello = fmt.Errorf("proto: unexpected end of group")
)
